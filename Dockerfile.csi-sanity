ARG BASE_IMAGE
ARG BUILD_IMAGE

# iscsi build container
FROM $BASE_IMAGE as builder-iscsi
ARG OPEN_ISCSI_VERSION
ARG OPEN_ISCSI_NAMESPACE
ARG ALPINE_VERSION

RUN apk add --update python3-dev py3-pip build-base cairo cairo-dev cargo freetype-dev \
  gcc gdk-pixbuf-dev gettext jpeg-dev lcms2-dev libffi-dev musl-dev openjpeg-dev openssl-dev \
  pango-dev poppler-utils postgresql-client postgresql-dev py-cffi python3-dev rust tcl-dev \
  tiff-dev tk-dev zlib-dev alpine-sdk sudo git openrc open-iscsi autoconf py3-cryptography
RUN abuild-keygen -n -a -i -q && \
    git clone -b $ALPINE_VERSION-stable https://git.alpinelinux.org/aports
WORKDIR /aports/main/open-iscsi
RUN sed -i -e "s:^pkgrel=[0-9]*$:pkgrel=$OPEN_ISCSI_VERSION:" \
    -e "/build()/a sed -i s:ISCSIADM_ABSTRACT_NAMESPACE:$OPEN_ISCSI_NAMESPACE: usr/mgmt_ipc.h" \
    -e "s/openssl-dev>3/openssl-dev/" APKBUILD
RUN abuild -F -r -q

# csi-sanity build container
FROM $BUILD_IMAGE as builder-csi-sanity
WORKDIR /go/src/github.com/kubernetes-csi/
# csi-sanity versions: https://github.com/kubernetes-csi/csi-test/releases
ARG CSI_SANITY_VERSION_TAG
ENV CSI_SANITY_VERSION_TAG=$CSI_SANITY_VERSION_TAG
RUN apk add --no-cache make git
RUN git clone https://github.com/kubernetes-csi/csi-test.git &&\
    cd csi-test &&\
    git checkout -b ${CSI_SANITY_VERSION_TAG} ${CSI_SANITY_VERSION_TAG} &&\
    cd cmd/csi-sanity &&\
    make linux_amd64_dist &&\
    cp ./csi-sanity /csi-sanity


# driver build container
FROM $BUILD_IMAGE as builder-driver
WORKDIR /go/src/github.com/Nexenta/nexentastor-csi-driver-block/
COPY . ./
RUN apk add --no-cache make git
RUN make build &&\
    cp ./bin/nexentastor-csi-driver-block /nexentastor-csi-driver-block


# run driver and csi-sanity tests
FROM $BASE_IMAGE
WORKDIR /
# driver UNIX socket
ENV SOCK="unix:///csi.sock"
# install dependencies
# copy iscsi files
COPY --from=builder-iscsi /root/.abuild/*.pub /etc/apk/keys
COPY --from=builder-iscsi /root/packages /root/packages
RUN echo /root/packages/main >>/etc/apk/repositories
RUN apk update || true &&  \
    apk add coreutils util-linux blkid \
    e2fsprogs bash kmod curl jq ca-certificates open-iscsi

# copy csi-sanity from build container
COPY --from=builder-csi-sanity /csi-sanity /
# copy driver from build container
RUN mkdir /nexentastor-csi-driver-block
COPY --from=builder-driver /nexentastor-csi-driver-block /nexentastor-csi-driver-block/
RUN mkdir /lib64 &&\
    ln -s /lib/libc.musl-x86_64.so.1 /lib64/ld-linux-x86-64.so.2

RUN mkdir -p /etc/iscsi
COPY initiatorname.iscsi /etc/iscsi/initiatorname.iscsi
RUN cp -r /usr/sbin/* /sbin/
RUN /sbin/iscsid

ENV PATH="/nexentastor-csi-driver-block/:${PATH}"
# copy driver config file
COPY ./tests/csi-sanity/driver-config-csi-sanity.yaml /config/driver-config-csi-sanity.yaml
# create mount direactory for tests
# driver run script
RUN echo '/nexentastor-csi-driver-block/nexentastor-csi-driver-block --config-dir=/config --endpoint=${SOCK} --nodeid=local &' > /run-driver &&\
    chmod +x /run-driver
# details: https://stackoverflow.com/questions/34729748/installed-go-binary-not-found-in-path-on-alpine-linux-docker
# versions
RUN /csi-sanity -version &&\
    /nexentastor-csi-driver-block/nexentastor-csi-driver-block --version
# other csi-sanity options: --ginkgo.v -ginkgo.noColor
#TODO remove "--ginkgo.skip" option after fixing volume paginatin by token:
ENTRYPOINT ["/bin/sh", "-c", "/run-driver && /csi-sanity --csi.endpoint=${SOCK} --csi.createpathcmdtimeout=180s --csi.removepathcmdtimeout=180s --ginkgo.skip 'pagination should detect volumes added between pages and accept tokens when the last volume from a page is deleted' --ginkgo.skip 'should fail when volume is not found'"]
#ENTRYPOINT ["/bin/sh", "-c", "/run-driver && /csi-sanity --csi.endpoint=${SOCK} --csi.createpathcmdtimeout=180 --csi.removepathcmdtimeout=180]
